@startuml
actor User as user
participant "Iceberg UI" as ice
participant "Client\nExchange Port" as server
participant "Kafka\nCommand Channel" as command
participant "Event Stream\nSequencer" as ess
participant "Kafka\nEvent Channel" as event
participant "Matching\nEngine" as mem
participant "Database\nWriter" as writer
participant "DataLayer\nMongoDB" as db

activate ice#red
user -> ice: submit()
ice-> server: cancelOrder(orderID)
activate server #blue

server -> server: header := ("CEM", CSN, LocalDateTime.now(),\n FinExCommandType.CancelOrder)
activate command #lightblue
server -> command: SendCommand(header, orderID)

activate ess #blue
command <- ess: listen(message)
ess -> ess: commandHeader := oMapper.readValue(message)
ess -> ess: orderID := oMapper.readValue(objectMessage)
ess -> ess: eventHeader :=(commandHeader, ESN, FinExEventType.PendingOrderCancel)
ess -> event: SendEvent(eventHeader, orderID)
activate event #lightblue



activate mem #blue
event <- mem: listen(message)


mem-> mem: eventHeader := oMapper.readValue(message)
mem-> mem: orderID := oMapper.readValue(objectMessage)
mem-> mem: order = ordersArray.get(orderID)
mem-> mem: books.get(order.getProductID()).cancelOrder(order
mem-> mem: commandHeader := ("MEM", CSN, LocalDateTime.now(),\n FinExCommandType.CancelOrder)
mem-> command: SendCommand (    commandHeader, orderID)



command <- ess: listen(message)
ess -> ess: commandHeader := oMapper.readValue(message)
ess -> ess: orderID := oMapper.readValue(objectMessage)
ess -> ess: header := (commandHeader, ESN,\n FinExCommandType.orderCancelled)
ess -> event: SendEvent(header, orderID)


activate writer #blue
event <- writer: listen(message)


writer -> writer: eventHeader := oMapper.readValue(message)
writer -> writer: orderID := oMapper.readValue(objectMessage)
writer -> db: UpdaterOrder(OrderCancelled, orderID)


server -> event: CheckEvent("CEM", CSN)

deactivate mem
deactivate command
deactivate ess
deactivate event
deactivate writer


server --> ice: order updated
ice--> user: displayOrderStatus()
deactivate server

deactivate ice
@enduml